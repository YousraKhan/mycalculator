{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","event","target","id","setState","value1","value","value2","onSubmitButton","n3","Number","state","result","operation","react_default","a","createElement","className","type","placeholder","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAiJeA,cA3IX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA2BJI,cAAgB,SAACC,GACW,WAApBA,EAAMC,OAAOC,GAEbV,EAAKW,SAAS,CAAEC,OAAQJ,EAAMC,OAAOI,QAGZ,WAApBL,EAAMC,OAAOC,IAGlBV,EAAKW,SAAS,CAAEG,OAAQN,EAAMC,OAAOI,SArC/Bb,EA+Ede,eAAiB,SAACP,GAEd,IAAIQ,EAEuB,QAAvBR,EAAMC,OAAOI,OAEbG,EAAMC,OAAOjB,EAAKkB,MAAMN,QAAYK,OAAOjB,EAAKkB,MAAMJ,QAKtDd,EAAKW,SAAS,CAAEQ,OAAQH,EAAII,UAAW,OAEX,QAAvBZ,EAAMC,OAAOI,OAElBG,EAAMC,OAAOjB,EAAKkB,MAAMN,QAAYK,OAAOjB,EAAKkB,MAAMJ,QAEtDd,EAAKW,SAAS,CAAEQ,OAAQH,EAAII,UAAW,OAEX,QAAvBZ,EAAMC,OAAOI,OAElBG,EAAMC,OAAOjB,EAAKkB,MAAMN,QAAYK,OAAOjB,EAAKkB,MAAMJ,QAEtDd,EAAKW,SAAS,CAAEQ,OAAQH,EAAII,UAAW,OAEX,QAAvBZ,EAAMC,OAAOI,QAElBG,EAAMC,OAAOjB,EAAKkB,MAAMN,QAAYK,OAAOjB,EAAKkB,MAAMJ,QAEtDd,EAAKW,SAAS,CAAEQ,OAAQH,EAAII,UAAW,QA1G3CpB,EAAKkB,MAAQ,CACTN,OAAQ,IACRE,OAAQ,GACRM,UAAW,GACXD,OAAQ,MANFnB,wEAoHV,OACIqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,cAEAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,6BAA6Bd,GAAG,SAASe,KAAK,SAASC,YAAY,UAAUC,SAAUxB,KAAKI,gBAC7Gc,EAAAC,EAAAC,cAAA,SAAOC,UAAU,4BAA4Bd,GAAG,SAASe,KAAK,SAASC,YAAY,UAAUC,SAAUxB,KAAKI,gBAJhH,IAIkIc,EAAAC,EAAAC,cAAA,WAC9HF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCd,GAAG,UAAUe,KAAK,SAASZ,MAAM,MAAMe,QAASzB,KAAKY,iBACzGM,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCd,GAAG,UAAUe,KAAK,SAASZ,MAAM,MAAMe,QAASzB,KAAKY,iBACzGM,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCd,GAAG,UAAUe,KAAK,SAASZ,MAAM,MAAMe,QAASzB,KAAKY,iBACzGM,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCd,GAAG,UAAUe,KAAK,SAASZ,MAAM,MAAMe,QAASzB,KAAKY,iBAR7G,IAQgIM,EAAAC,EAAAC,cAAA,WAGlG,OAAtBpB,KAAKe,MAAMC,OAEPE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYrB,KAAKe,MAAMN,OAApC,IAA6CT,KAAKe,MAAME,UAAxD,IAAoEjB,KAAKe,MAAMJ,OAA/E,MAA0FX,KAAKe,MAAMC,QACnG,aArIRU,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dfa80838.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            value1: ' ',\r\n            value2: '',\r\n            operation: '',\r\n            result: null\r\n        }\r\n    }\r\n\r\n    /*   onInputChange1 = (event) => {\r\n   \r\n   \r\n           console.log(event.target.id);\r\n           console.log(event.target.value);\r\n           this.setState({ value1: event.target.value })\r\n   \r\n   \r\n       }\r\n   \r\n       onInputChange2 = (event) => {\r\n   \r\n           console.log(event.target.id);\r\n           console.log(event.target.value);\r\n           this.setState({ value2: event.target.value })\r\n   \r\n       } */\r\n\r\n    onInputChange = (event) => {\r\n        if (event.target.id === 'value1') {\r\n           // console.log(event.target.value);\r\n            this.setState({ value1: event.target.value })\r\n\r\n        }\r\n        else if (event.target.id === 'value2') {\r\n\r\n            // console.log(event.target.value);\r\n            this.setState({ value2: event.target.value })\r\n        }\r\n\r\n    }\r\n\r\n  /*  onSubmitButton1 = (event) => {\r\n\r\n\r\n        var n3 = (Number(this.state.value1)) + (Number(this.state.value2));\r\n\r\n        console.log(event.target.value);\r\n\r\n        console.log(n3);\r\n        this.setState({ result: n3, operation: '+' })\r\n\r\n       \r\n    }\r\n\r\n    onSubmitButton2 = (event) => {\r\n\r\n\r\n        var n3 = (Number(this.state.value1)) - (Number(this.state.value2));\r\n        console.log(n3);\r\n        this.setState({ result: n3, operation: '-' })\r\n    }\r\n\r\n    onSubmitButton3 = (event) => {\r\n\r\n\r\n        var n3 = (Number(this.state.value1)) / (Number(this.state.value2));\r\n        console.log(n3);\r\n        this.setState({ result: n3, operation: '/' })\r\n    }\r\n\r\n    onSubmitButton4 = (event) => {\r\n\r\n\r\n        var n3 = (Number(this.state.value1)) * (Number(this.state.value2));\r\n        console.log(n3);\r\n        this.setState({ result: n3, operation: '*' })\r\n    }  */\r\n\r\n    onSubmitButton = (event) => {\r\n\r\n        var n3;\r\n\r\n        if (event.target.value === 'Add')\r\n        {\r\n            n3 = (Number(this.state.value1)) + (Number(this.state.value2));\r\n\r\n            // console.log(event.target.value);\r\n    \r\n         //   console.log(n3);\r\n            this.setState({ result: n3, operation: '+' })\r\n        }\r\n        else if (event.target.value === 'Sub')\r\n        {\r\n            n3 = (Number(this.state.value1)) - (Number(this.state.value2));\r\n            // console.log(n3);\r\n            this.setState({ result: n3, operation: '-' })\r\n        }\r\n        else if (event.target.value === 'Div')\r\n        {\r\n            n3 = (Number(this.state.value1)) / (Number(this.state.value2));\r\n           // console.log(n3);\r\n            this.setState({ result: n3, operation: '/' })\r\n        }\r\n        else if (event.target.value === 'Mul')\r\n        {\r\n            n3 = (Number(this.state.value1)) * (Number(this.state.value2));\r\n        //    console.log(n3);\r\n            this.setState({ result: n3, operation: '*' })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f2 white'>CALCULATOR</h1>\r\n\r\n                <input className='tc br3 ba b--back  pa2 ma2' id='value1' type='number' placeholder='value 1' onChange={this.onInputChange} />\r\n                <input className='tc br3 ba b--back pa2 ma2' id='value2' type='number' placeholder='value 2' onChange={this.onInputChange} /> <br />\r\n                <input className='pa2 ph4 ma2 br3 ba b--black grow' id=\" result\" type='button' value='Add' onClick={this.onSubmitButton} />\r\n                <input className='pa2 ph4 ma2 br3 ba b--black grow' id=\" result\" type='button' value='Sub' onClick={this.onSubmitButton} />\r\n                <input className='pa2 ph4 ma2 br3 ba b--black grow' id=\" result\" type='button' value='Div' onClick={this.onSubmitButton} />\r\n                <input className='pa2 ph4 ma2 br3 ba b--black grow' id=\" result\" type='button' value='Mul' onClick={this.onSubmitButton} /> <br />\r\n\r\n                {\r\n                    this.state.result !== null\r\n                        ?\r\n                        <p className='f3 white'>{this.state.value1} {this.state.operation} {this.state.value2} = {this.state.result}</p>\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}